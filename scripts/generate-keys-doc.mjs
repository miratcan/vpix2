import { readFileSync, writeFileSync } from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import vm from 'node:vm';
import ts from 'typescript';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const repoRoot = path.resolve(__dirname, '..');

const keybindingsPath = path.join(repoRoot, 'core', 'keybindings.ts');
const outputPath = path.join(repoRoot, 'docs', 'KEYS.md');

const source = readFileSync(keybindingsPath, 'utf8');

const { outputText } = ts.transpileModule(source, {
  compilerOptions: {
    module: ts.ModuleKind.CommonJS,
    target: ts.ScriptTarget.ES2020,
    esModuleInterop: true,
  },
  fileName: 'keybindings.ts',
});

const sandbox = {
  exports: {},
  module: { exports: {} },
  require(specifier) {
    throw new Error(`Dynamic require of "${specifier}" is not supported in documentation generation`);
  },
};

vm.runInNewContext(outputText, sandbox, { filename: 'keybindings.js' });

const bindings = sandbox.module.exports.KEYBINDINGS ?? sandbox.exports.KEYBINDINGS;

if (!Array.isArray(bindings)) {
  throw new Error('Failed to load KEYBINDINGS from core/keybindings.ts');
}

const sections = new Map([
  ['global', []],
  ['normal', []],
  ['visual', []],
]);

for (const binding of bindings) {
  const bucket = sections.get(binding.scope);
  if (!bucket) continue;
  bucket.push(binding);
}

const CONDITION_LABELS = {
  undefined: 'Always',
  always: 'Always',
  'no-prefix': 'No prefix',
  'prefix:any': 'Prefix active',
  'prefix:g': 'After `g` prefix',
  'prefix:r': 'After `r` prefix',
};

function formatCondition(value) {
  return CONDITION_LABELS[value] ?? value ?? 'Always';
}

function formatKey(binding) {
  return binding.display ?? binding.key;
}

function createTable(bindingsForScope) {
  const header = '| Shortcut | When | Command | Description |';
  const separator = '| --- | --- | --- | --- |';
  const rows = bindingsForScope.map((binding) => {
    const shortcut = `\`${formatKey(binding)}\``;
    const when = formatCondition(binding.when);
    const command = `\`${binding.command}\``;
    const description = binding.description ?? '';
    return `| ${shortcut} | ${when} | ${command} | ${description} |`;
  });
  return [header, separator, ...rows].join('\n');
}

const scopeHeadings = {
  global: 'Global',
  normal: 'Normal mode',
  visual: 'Visual mode',
};

let output = '';
output += '# VPix2 Keybindings\n\n';
output += '> This file is automatically generated from `core/keybindings.ts` by `node scripts/generate-keys-doc.mjs`.\n';
output += '> Do not edit manually.\n\n';

for (const [scope, bindingsForScope] of sections.entries()) {
  if (bindingsForScope.length === 0) continue;
  output += `## ${scopeHeadings[scope] ?? scope}\n\n`;
  output += `${createTable(bindingsForScope)}\n\n`;
}

writeFileSync(outputPath, output.trimEnd() + '\n', 'utf8');
